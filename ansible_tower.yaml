tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint communicates with Ansible Tower via REST API.

imports:
  - http://cloudify.co/spec/cloudify/6.3.1/types.yaml
  - plugin:cloudify-utilities-plugin

inputs:

  ansible_tower_endpoint:
    type: string
    description: |
      An endpoint of a reachable Ansible Tower instance.
      Should not contain http:// nor https:// prefix. Those are set up in use_ssl input.

  ansible_tower_use_ssl:
    type: boolean
    default: true

  ansible_tower_username:
    type: string
    default: { get_secret: ANSIBLE_TOWER_USERNAME }

  ansible_tower_password:
    type: string
    default: { get_secret: ANSIBLE_TOWER_PASSWORD }

  ansible_tower_organization_id:
    type: string
    default: '1'

  ansible_tower_scm_url:
    type: string
    default: 'https://github.com/jakubcierlik/exl-example-playbook.git'
    description: |
      Github repository containing Ansible Playbooks.

  ansible_tower_playbook_name:
    type: string
    default: 'playbook.yaml'
    description: |
      Name of the Ansible Playbook from SCM URL that should be executed.

  ec2_instance_deployment_id:
    type: string


node_templates:

  ansible_tower_credentials:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: ansible_tower/scripts/encode_credentials.sh
          executor: central_deployment_agent
          inputs:
            ANSIBLE_TOWER_USERNAME: { get_input: ansible_tower_username }
            ANSIBLE_TOWER_PASSWORD: { get_input: ansible_tower_password }

  ansible_tower_inventory:
    type: cloudify.rest.Requests
    properties:
      hosts: [{ get_input: ansible_tower_endpoint }]
      ssl: true
      verify: false
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            template_file: ansible_tower/rest_templates/create_inventory.yaml
            prerender: true
            save_to: inventory
            params:
              AUTHENTICATION: { get_attribute: [ansible_tower_credentials, credentials] }
              ORGANIZATION_ID: { get_input: ansible_tower_organization_id }
        stop:
          inputs:
            template_file: ansible_tower/rest_templates/delete_inventory.yaml
            prerender: true
            params:
              AUTHENTICATION: { get_attribute: [ansible_tower_credentials, credentials] }
              INVENTORY_ID: { get_attribute: [SELF, result_properties, inventory, id] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: ansible_tower_credentials

  ansible_tower_host:
    type: cloudify.rest.Requests
    properties:
      hosts: [{ get_input: ansible_tower_endpoint }]
      ssl: true
      verify: false
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            template_file: ansible_tower/rest_templates/create_host.yaml
            prerender: true
            save_to: host
            params:
              AUTHENTICATION: { get_attribute: [ansible_tower_credentials, credentials] }
              INVENTORY_ID: { get_attribute: [ansible_tower_inventory, result_properties, inventory, id] }
              HOST_IP: { get_capability: [{ get_input: ec2_instance_deployment_id }, instance_public_ip] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: ansible_tower_inventory

  ansible_tower_project:
    type: cloudify.rest.Requests
    properties:
      hosts: [{ get_input: ansible_tower_endpoint }]
      ssl: true
      verify: false
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            template_file: ansible_tower/rest_templates/create_project.yaml
            prerender: true
            save_to: project
            params:
              AUTHENTICATION: { get_attribute: [ansible_tower_credentials, credentials] }
              ORGANIZATION_ID: { get_input: ansible_tower_organization_id }
              SCM_URL: { get_input: ansible_tower_scm_url }
        stop:
          inputs:
            template_file: ansible_tower/rest_templates/delete_project.yaml
            prerender: true
            params:
              AUTHENTICATION: { get_attribute: [ansible_tower_credentials, credentials] }
              PROJECT_ID: { get_attribute: [SELF, result_properties, project, id] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: ansible_tower_host

  ansible_tower_job_template:
    type: cloudify.rest.Requests
    properties:
      hosts: [{ get_input: ansible_tower_endpoint }]
      ssl: true
      verify: false
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            template_file: ansible_tower/rest_templates/create_job_template.yaml
            prerender: true
            save_to: job_template
            params:
              AUTHENTICATION: { get_attribute: [ansible_tower_credentials, credentials] }
              INVENTORY_ID: { get_attribute: [ansible_tower_inventory, result_properties, inventory, id] }
              PROJECT_ID: { get_attribute: [ansible_tower_project, result_properties, project, id] }
              PLAYBOOK_NAME: { get_input: ansible_tower_playbook_name }
        stop:
          inputs:
            template_file: ansible_tower/rest_templates/delete_job_template.yaml
            prerender: true
            params:
              AUTHENTICATION: { get_attribute: [ansible_tower_credentials, credentials] }
              JOB_TEMPLATE_ID: { get_attribute: [SELF, result_properties, job_template, id] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: ansible_tower_project
      - type: cloudify.relationships.depends_on
        target: ansible_tower_inventory

  ansible_tower_credential:
    type: cloudify.rest.Requests
    properties:
      hosts: [{ get_input: ansible_tower_endpoint }]
      ssl: true
      verify: false
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            template_file: ansible_tower/rest_templates/create_credential.yaml
            prerender: true
            save_to: credential
            params:
              AUTHENTICATION: { get_attribute: [ansible_tower_credentials, credentials] }
              JOB_TEMPLATE_ID: { get_attribute: [ansible_tower_job_template, result_properties, job_template, id] }
              SSH_KEY_DATA: { get_secret: SSH_KEY_DATA }
        stop:
          inputs:
            template_file: ansible_tower/rest_templates/delete_credential.yaml
            prerender: true
            params:
              AUTHENTICATION: { get_attribute: [ansible_tower_credentials, credentials] }
              CREDENTIAL_ID: { get_attribute: [SELF, result_properties, credential, id] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: ansible_tower_job_template

  ansible_tower_launch_job:
    type: cloudify.rest.Requests
    properties:
      hosts: [{ get_input: ansible_tower_endpoint }]
      ssl: true
      verify: false
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          inputs:
            template_file: ansible_tower/rest_templates/launch_job.yaml
            prerender: true
            save_to: launch_job
            params:
              AUTHENTICATION: { get_attribute: [ansible_tower_credentials, credentials] }
              JOB_TEMPLATE_ID: { get_attribute: [ansible_tower_job_template, result_properties, job_template, id] }
    relationships:
      - type: cloudify.relationships.depends_on
        target: ansible_tower_job_template
      - type: cloudify.relationships.depends_on
        target: ansible_tower_credential

capabilities:
  inventory_id:
    value: { get_attribute: [ansible_tower_inventory, result_properties, inventory, id] }

  host_id:
    value: { get_attribute: [ansible_tower_host, result_properties, host, id] }

  project_id:
    value: { get_attribute: [ansible_tower_project, result_properties, project, id] }

  job_template_id:
    value: { get_attribute: [ansible_tower_job_template, result_properties, job_template, id] }

  credential_id:
    value: { get_attribute: [ansible_tower_credential, result_properties, credential, id] }

  job_id:
    value: { get_attribute: [ansible_tower_launch_job, result_properties, launch_job, id] }
